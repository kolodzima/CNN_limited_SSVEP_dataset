%The program creates new EEG signals for a limited data set. 
%The data are divided into training and validation sets. 
%The solution is then tested on a test EEG set. 

%The structure of the CNN and the augmentation method 
%have been described in the publication: doi: x x x x x x x 

% samplingRate - denotes the sampling frequency of the EEG signal, set to 256 Hz.
% channels - a list of EEG channels selected for analysis or processing, specifically channels 1, 15, and 16 in this context.
% numGeneratedSignals - the number of EEG signals to be generated through the augmentation method, specified as 50,000 in this case.
% currentCount - a variable used for counting and indexing the generated signals during the augmentation process.
% subjectNumber - an identifier for the subject or patient from whose data the signals are being processed.
% generatedSignal - a cell array that stores the EEG signals generated by the generateSignals function.
% trainData and trainLabels - arrays that contain the training data (EEG signals) and their corresponding labels (categories).
% validationData and validationLabels - these variables are introduced to hold data and labels used for model validation.
% tempTrainData and tempTrainLabels - temporary variables to store training data and labels before dividing them into training and validation sets.
% validationInterval - a variable determining the interval at which data are selected for the validation set.
% index - an array used for indexing and selecting data for the validation set.
% testInterval - a variable determining the interval at which data are selected for testing the model.
% testData and testLabels - arrays used to store test data and their corresponding labels.


clc;
close all;
clear;

samplingRate = 256;
channels = [1, 2, 3];

numGeneratedSignals = 50; % Number of signals generated by augmentation method 50000
currentCount = 0;

subjectNumber = 1; % Subject number

% Load and process session data
for session = 5:8
    load(['Subject_' num2str(subjectNumber) '\session_' num2str(session) 'Hz_train_3_electrodes.mat']);
    for channelIdx = 1:length(channels)
        channel = channels(channelIdx);
        signal = X_train(:, channel);
        generatedSignal{channelIdx} = generateSignals(signal, numGeneratedSignals);
    end

    for i = 1:numGeneratedSignals
        currentCount = currentCount + 1;
        for channelIdx = 1:length(channels)
            trainData(:, channelIdx, 1, currentCount) = generatedSignal{1, channelIdx}(:, i);
        end
        trainLabels(:, currentCount) = categorical(session);
    end
end

clearvars -except trainData trainLabels subjectNumber channels

tempTrainData = trainData;
tempTrainLabels = trainLabels;

currentCount = 0;
validationCount = 0;
validationInterval = 10;
index = zeros(1, size(trainLabels, 2));
index(1:validationInterval:end) = 1;

for k = 1:size(trainLabels, 2)
    if index(k) == 1
        validationCount = validationCount + 1;
        validationData(:,:,1,validationCount) = tempTrainData(:,:,:,k);
        validationLabels(1, validationCount) = tempTrainLabels(1, k);
    elseif index(k) == 0
        currentCount = currentCount + 1;
        trainData(:,:,1,currentCount) = tempTrainData(:,:,:,k);
        trainLabels(1, currentCount) = tempTrainLabels(1, k);
    end
end

clearvars -except trainData trainLabels validationData validationLabels subjectNumber channels

% Neural network layers and training options
layers = [
    imageInputLayer([256, 3, 1])
    convolution2dLayer([8, 3], 32, 'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    convolution2dLayer([16, 3], 64, 'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    convolution2dLayer([32, 1], 128, 'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    convolution2dLayer([64, 1], 128, 'Padding', 'same')
    batchNormalizationLayer
    reluLayer
    fullyConnectedLayer(4)
    softmaxLayer
    classificationLayer];

options = trainingOptions('adam', ...
    'InitialLearnRate', 0.001, ...
    'MaxEpochs', 50, ...
    'Shuffle', 'every-epoch', ...
    'Verbose', false, ...
    'Plots', 'training-progress', ...
    'ValidationData', {validationData, validationLabels});

net = trainNetwork(trainData, trainLabels, layers, options);

clearvars -except net subjectNumber channels

testInterval = 64;

% Load and process test data
for session = 5:8
    load(['Subject_' num2str(subjectNumber) '\session_' num2str(session) 'Hz_test_3_electrodes.mat']);
    currentCount = 0;
    for k = 1:testInterval:length(X_test) - 256
        currentCount = currentCount + 1;
        testData(:,:,1, currentCount) = X_test(k:k + 256 - 1, channels);
        testLabels(:, currentCount) = categorical(session);
    end
end

Y = classify(net, testData);
accuracy = sum(Y == testLabels') / length(Y)
